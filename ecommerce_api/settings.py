"""
Django settings for ecommerce_api project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from decouple import config
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-default-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # CORS headers para permitir peticiones desde frontend
    'users',  # App para manejo de usuarios y roles
    'rest_framework',  # Django REST Framework para APIs
    'rest_framework_simplejwt',  # Simple JWT para autenticación por tokens
    'products',  # App de productos y categorías
    'shop_orders',  # App de órdenes y carrito de compras
    'reports',  # App de reportes dinámicos
    'predictions',  # App para modelos de ML y predicciones
    'drf_spectacular',  # Documentación automática de API con Swagger
    'django_filters',  # Filtros avanzados para Django REST Framework
    'audit_log',  # Sistema de auditoría y bitácora
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware (debe ir antes de CommonMiddleware)
    'ecommerce_api.debug_middleware.URLDebugMiddleware',  # Debug middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'audit_log.middleware.AuditMiddleware',  # Auditoría automática (después de autenticación)
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='ecommerce_db'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default='12345678'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
        'CONN_MAX_AGE': 600,
    }
}


# Redis Cache Configuration
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'smartsales',
        'TIMEOUT': 300,  # 5 minutos por defecto
    }
}

# Cache time to live (en segundos)
CACHE_TTL = 60 * 5  # 5 minutos


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.CustomUser'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Configuración para drf-spectacular (Swagger)
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Stripe Configuration
import stripe

# Configura tus claves de Stripe en variables de entorno o archivo .env
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='pk_test_YOUR_PUBLISHABLE_KEY_HERE')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='sk_test_YOUR_SECRET_KEY_HERE')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='whsec_YOUR_WEBHOOK_SECRET_HERE')
stripe.api_key = STRIPE_SECRET_KEY

# Frontend URL for payment redirects
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:5173')

# CORS Configuration - Permitir peticiones desde el frontend
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite default
    "http://localhost:3000",  # React default
    "http://localhost:8080",  # Vue default
    "http://localhost:4200",  # Angular default
    "http://127.0.0.1:5173",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8080",
    "http://127.0.0.1:4200",
]

# Permitir cookies y credenciales en peticiones CORS
CORS_ALLOW_CREDENTIALS = True

# Headers permitidos en peticiones CORS
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Métodos HTTP permitidos
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Configuración de logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'reports': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'ecommerce_api': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ============================================================================
# CONFIGURACIÓN DE DRF-SPECTACULAR (SWAGGER/OpenAPI)
# ============================================================================

SPECTACULAR_SETTINGS = {
    'TITLE': 'SmartSales365 API',
    'DESCRIPTION': '''
    Documentación oficial para la API del sistema de gestión comercial inteligente SmartSales365.
    
    ## 🎯 Características Principales
    
    - **Autenticación JWT**: Sistema seguro con tokens de acceso y refresco
    - **E-commerce Completo**: Productos, categorías, órdenes de compra
    - **Integración Stripe**: Pagos en línea con webhooks automáticos
    - **Reportes Inteligentes**: Generación de reportes PDF/Excel con IA
    - **Machine Learning**: Predicciones de ventas con Random Forest
    - **Comprobantes**: Generación automática de facturas en PDF
    
    ## 🔐 Autenticación
    
    1. Obtén un token JWT desde `/api/token/` con tus credenciales
    2. Usa el token en el header: `Authorization: Bearer <tu_token>`
    3. Refresca el token cuando expire usando `/api/token/refresh/`
    
    ## 📚 Documentación Adicional
    
    - [Guía de URLs](/api/docs/)
    - [Configuración de Stripe](STRIPE_SETUP_GUIDE.md)
    - [Reportes con IA](AI_REPORTS_IMPLEMENTATION.md)
    - [Machine Learning](ML_PREDICTIONS_IMPLEMENTATION.md)
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'tryItOutEnabled': True,
    },
    'SECURITY': [
        {
            'Bearer': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    ],
}
